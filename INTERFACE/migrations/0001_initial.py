# Generated by Django 4.0.5 on 2022-10-28 13:08

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AnalysisAr',
            fields=[
                ('analysis_id', models.CharField(db_column='Analysis ID', max_length=100, primary_key=True, serialize=False)),
                ('number_36ar_fv_field', models.FloatField(blank=True, db_column='36Ar [fV]', null=True)),
                ('uncertainty_36ar_1s_field', models.FloatField(blank=True, db_column='uncertainty 36Ar [%1s] ', null=True)),
                ('number_37ar_fv_field', models.FloatField(blank=True, db_column='37Ar [fV]', null=True)),
                ('uncerainty_37ar_1s_field', models.FloatField(blank=True, db_column='uncerainty 37Ar [1s] ', null=True)),
                ('number_38ar_fv_field', models.FloatField(blank=True, db_column='38Ar [fV]', null=True)),
                ('uncertainty_38ar_field', models.FloatField(blank=True, db_column='uncertainty 38Ar [%] ', null=True)),
                ('number_39ar_fv_field', models.FloatField(blank=True, db_column='39Ar [fV] ', null=True)),
                ('uncertainty_39ar_1s_field', models.FloatField(blank=True, db_column='uncertainty 39Ar [1s] ', null=True)),
                ('number_40ar_fv_field', models.FloatField(blank=True, db_column='40Ar [fV]', null=True)),
                ('number_1s_40ar_field', models.FloatField(blank=True, db_column='1s 40Ar [%] ', null=True)),
                ('age_ma_field', models.FloatField(blank=True, db_column='Age [Ma]', null=True)),
                ('uncertainty_age_2s_ma_field', models.FloatField(blank=True, db_column='uncertainty Age [2s,Ma]', null=True)),
                ('number_40ar_field', models.FloatField(blank=True, db_column='40Ar [%] ', null=True)),
                ('number_39ar_field', models.FloatField(blank=True, db_column='39Ar [%]', null=True)),
                ('ca_k', models.FloatField(blank=True, db_column='Ca/K', null=True)),
                ('uncertainty_ca_k_1s_field', models.FloatField(blank=True, db_column='uncertainty Ca/K [1s]', null=True)),
                ('cl_k', models.FloatField(blank=True, db_column='Cl/K', null=True)),
                ('uncertainty_cl_k_1s_field', models.FloatField(blank=True, db_column='uncertainty Cl/K [1s]', null=True)),
            ],
            options={
                'db_table': 'analysis_ar',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AnalysisArArView',
            fields=[
                ('analysis_id', models.CharField(blank=True, db_column='Analysis ID', max_length=100, primary_key=True, serialize=False)),
                ('material_sample_id', models.CharField(blank=True, db_column='Material Sample ID', max_length=100, null=True)),
                ('location_id', models.CharField(blank=True, db_column='Location ID', max_length=100, null=True)),
                ('decimal_latitude', models.CharField(blank=True, db_column='Decimal Latitude', max_length=100, null=True)),
                ('decimal_longitude', models.CharField(blank=True, db_column='Decimal Longitude', max_length=100, null=True)),
                ('elevation_in_meters', models.FloatField(blank=True, db_column='Elevation In Meters', null=True)),
                ('verbatim_locality', models.TextField(blank=True, db_column='Verbatim Locality', null=True)),
                ('field_mission_id', models.CharField(blank=True, db_column='Field Mission ID', max_length=100, null=True)),
                ('sampling_date', models.DateField(blank=True, db_column='Sampling Date', null=True)),
                ('simple_lithology_description', models.CharField(blank=True, db_column='Simple Lithology Description', max_length=100, null=True)),
                ('alteration_facies', models.CharField(blank=True, db_column='Alteration Facies', max_length=100, null=True)),
                ('metamorphism_facies', models.CharField(blank=True, db_column='Metamorphism Facies', max_length=100, null=True)),
                ('formation', models.CharField(blank=True, db_column='Formation', max_length=100, null=True)),
                ('current_storage', models.TextField(blank=True, db_column='Current storage', null=True)),
                ('comment', models.TextField(blank=True, db_column='Comment', null=True)),
                ('number_36ar_fv_field', models.FloatField(blank=True, db_column='36Ar [fV]', null=True)),
                ('uncertainty_36ar_1s_field', models.FloatField(blank=True, db_column='uncertainty 36Ar [%1s] ', null=True)),
                ('number_37ar_fv_field', models.FloatField(blank=True, db_column='37Ar [fV]', null=True)),
                ('uncerainty_37ar_1s_field', models.FloatField(blank=True, db_column='uncerainty 37Ar [1s] ', null=True)),
                ('number_38ar_fv_field', models.FloatField(blank=True, db_column='38Ar [fV]', null=True)),
                ('uncertainty_38ar_field', models.FloatField(blank=True, db_column='uncertainty 38Ar [%] ', null=True)),
                ('number_39ar_fv_field', models.FloatField(blank=True, db_column='39Ar [fV] ', null=True)),
                ('uncertainty_39ar_1s_field', models.FloatField(blank=True, db_column='uncertainty 39Ar [1s] ', null=True)),
                ('number_40ar_fv_field', models.FloatField(blank=True, db_column='40Ar [fV]', null=True)),
                ('number_1s_40ar_field', models.FloatField(blank=True, db_column='1s 40Ar [%] ', null=True)),
                ('age_ma_field', models.FloatField(blank=True, db_column='Age [Ma]', null=True)),
                ('uncertainty_age_2s_ma_field', models.FloatField(blank=True, db_column='uncertainty Age [2s,Ma]', null=True)),
                ('number_40ar_field', models.FloatField(blank=True, db_column='40Ar [%] ', null=True)),
                ('number_39ar_field', models.FloatField(blank=True, db_column='39Ar [%]', null=True)),
                ('ca_k', models.FloatField(blank=True, db_column='Ca/K', null=True)),
                ('uncertainty_ca_k_1s_field', models.FloatField(blank=True, db_column='uncertainty Ca/K [1s]', null=True)),
                ('cl_k', models.FloatField(blank=True, db_column='Cl/K', null=True)),
                ('uncertainty_cl_k_1s_field', models.FloatField(blank=True, db_column='uncertainty Cl/K [1s]', null=True)),
                ('location_on_gis', models.TextField(blank=True, db_column='Location on GIS', null=True)),
            ],
            options={
                'db_table': 'analysis_ar_ar_view',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AnalysisFissionFracksView',
            fields=[
                ('analysis_id', models.CharField(blank=True, db_column='Analysis ID', max_length=100, primary_key=True, serialize=False)),
                ('material_sample_id', models.CharField(blank=True, db_column='Material Sample ID', max_length=100, null=True)),
                ('location_id', models.CharField(blank=True, db_column='Location ID', max_length=100, null=True)),
                ('decimal_latitude', models.CharField(blank=True, db_column='Decimal Latitude', max_length=100, null=True)),
                ('decimal_longitude', models.CharField(blank=True, db_column='Decimal Longitude', max_length=100, null=True)),
                ('elevation_in_meters', models.FloatField(blank=True, db_column='Elevation In Meters', null=True)),
                ('verbatim_locality', models.TextField(blank=True, db_column='Verbatim Locality', null=True)),
                ('field_mission_id', models.CharField(blank=True, db_column='Field Mission ID', max_length=100, null=True)),
                ('sampling_date', models.DateField(blank=True, db_column='Sampling Date', null=True)),
                ('simple_lithology_description', models.CharField(blank=True, db_column='Simple Lithology Description', max_length=100, null=True)),
                ('alteration_facies', models.CharField(blank=True, db_column='Alteration Facies', max_length=100, null=True)),
                ('metamorphism_facies', models.CharField(blank=True, db_column='Metamorphism Facies', max_length=100, null=True)),
                ('formation', models.CharField(blank=True, db_column='Formation', max_length=100, null=True)),
                ('current_storage', models.TextField(blank=True, db_column='Current storage', null=True)),
                ('n_grains', models.IntegerField(blank=True, db_column='N Grains', null=True)),
                ('ps', models.FloatField(blank=True, null=True)),
                ('ns', models.FloatField(blank=True, db_column='Ns', null=True)),
                ('pi', models.FloatField(blank=True, null=True)),
                ('ni', models.FloatField(blank=True, db_column='Ni', null=True)),
                ('pd', models.FloatField(blank=True, null=True)),
                ('nd', models.FloatField(blank=True, db_column='Nd', null=True)),
                ('px2', models.IntegerField(blank=True, db_column='PX2', null=True)),
                ('dispersion', models.FloatField(blank=True, db_column='Dispersion', null=True)),
                ('central_age_ma_field', models.FloatField(blank=True, db_column='Central age [Ma]', null=True)),
                ('number_1s_central_age_ma_field', models.FloatField(blank=True, db_column='1s central age [Ma]', null=True)),
                ('mtl_um_field', models.FloatField(blank=True, db_column='MTL [um]', null=True)),
                ('number_1s_mtl_um_field', models.FloatField(blank=True, db_column='1s MTL [um]', null=True)),
                ('n_lengths', models.IntegerField(blank=True, db_column='N lengths', null=True)),
                ('dpar_um_field', models.FloatField(blank=True, db_column='Dpar [um]', null=True)),
                ('number_1s_dpar_um_field', models.FloatField(blank=True, db_column='1s Dpar [um]', null=True)),
                ('u_ppm_field', models.FloatField(blank=True, db_column='U [ppm]', null=True)),
                ('location_on_gis', models.TextField(blank=True, db_column='Location on GIS', null=True)),
            ],
            options={
                'db_table': 'analysis_fission_fracks_view',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AnalysisFt',
            fields=[
                ('analysis_id', models.CharField(db_column='Analysis ID', max_length=100, primary_key=True, serialize=False)),
                ('n_grains', models.IntegerField(blank=True, db_column='N Grains', null=True)),
                ('ps', models.FloatField(blank=True, null=True)),
                ('ns', models.FloatField(blank=True, db_column='Ns', null=True)),
                ('pi', models.FloatField(blank=True, null=True)),
                ('ni', models.FloatField(blank=True, db_column='Ni', null=True)),
                ('pd', models.FloatField(blank=True, null=True)),
                ('nd', models.FloatField(blank=True, db_column='Nd', null=True)),
                ('px2', models.IntegerField(blank=True, db_column='PX2', null=True)),
                ('dispersion', models.FloatField(blank=True, db_column='Dispersion', null=True)),
                ('central_age_ma_field', models.FloatField(blank=True, db_column='Central age [Ma]', null=True)),
                ('number_1s_central_age_ma_field', models.FloatField(blank=True, db_column='1s central age [Ma]', null=True)),
                ('mtl_um_field', models.FloatField(blank=True, db_column='MTL [um]', null=True)),
                ('number_1s_mtl_um_field', models.FloatField(blank=True, db_column='1s MTL [um]', null=True)),
                ('n_lengths', models.IntegerField(blank=True, db_column='N lengths', null=True)),
                ('dpar_um_field', models.FloatField(blank=True, db_column='Dpar [um]', null=True)),
                ('number_1s_dpar_um_field', models.FloatField(blank=True, db_column='1s Dpar [um]', null=True)),
                ('u_ppm_field', models.FloatField(blank=True, db_column='U [ppm]', null=True)),
            ],
            options={
                'db_table': 'analysis_ft',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AnalysisUhe',
            fields=[
                ('analysis_id', models.CharField(db_column='Analysis ID', max_length=100, primary_key=True, serialize=False)),
                ('number_4he_nccstp_g_field', models.IntegerField(blank=True, db_column='4He [nccSTP/g]', null=True)),
                ('number_238_u_ppm_field', models.FloatField(blank=True, db_column='238_U [ppm]', null=True)),
                ('number_232_th_ppm_field', models.FloatField(blank=True, db_column='232_Th [ppm]', null=True)),
                ('number_147_sm_ppm_field', models.FloatField(blank=True, db_column='147_Sm [ppm]', null=True)),
                ('eu_ppm_field', models.FloatField(blank=True, db_column='eU [ppm]', null=True)),
                ('ft', models.FloatField(blank=True, db_column='FT', null=True)),
                ('th_u', models.FloatField(blank=True, db_column='Th/U', null=True)),
                ('measured_age_ma_field', models.FloatField(blank=True, db_column='Measured age [Ma]', null=True)),
                ('number_1s_measured_age_ma_field', models.FloatField(blank=True, db_column='1s measured age  [Ma]', null=True)),
                ('corrected_age_ma_field', models.FloatField(blank=True, db_column='Corrected age  [Ma]', null=True)),
                ('number_1s_corrected_age_ma_field', models.FloatField(blank=True, db_column='1s corrected age  [Ma]', null=True)),
                ('mean_age_ma_field', models.FloatField(blank=True, db_column='Mean age  [Ma]', null=True)),
                ('number_1s_mean_age_ma_field', models.FloatField(blank=True, db_column='1s mean age  [Ma]', null=True)),
                ('comment', models.CharField(blank=True, db_column='Comment', max_length=100, null=True)),
            ],
            options={
                'db_table': 'analysis_uhe',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AnalysisUHeView',
            fields=[
                ('analysis_id', models.CharField(blank=True, db_column='Analysis ID', max_length=100, primary_key=True, serialize=False)),
                ('material_sample_id', models.CharField(blank=True, db_column='Material Sample ID', max_length=100, null=True)),
                ('location_id', models.CharField(blank=True, db_column='Location ID', max_length=100, null=True)),
                ('decimal_latitude', models.CharField(blank=True, db_column='Decimal Latitude', max_length=100, null=True)),
                ('decimal_longitude', models.CharField(blank=True, db_column='Decimal Longitude', max_length=100, null=True)),
                ('elevation_in_meters', models.FloatField(blank=True, db_column='Elevation In Meters', null=True)),
                ('verbatim_locality', models.TextField(blank=True, db_column='Verbatim Locality', null=True)),
                ('field_mission_id', models.CharField(blank=True, db_column='Field Mission ID', max_length=100, null=True)),
                ('sampling_date', models.DateField(blank=True, db_column='Sampling Date', null=True)),
                ('simple_lithology_description', models.CharField(blank=True, db_column='Simple Lithology Description', max_length=100, null=True)),
                ('alteration_facies', models.CharField(blank=True, db_column='Alteration Facies', max_length=100, null=True)),
                ('metamorphism_facies', models.CharField(blank=True, db_column='Metamorphism Facies', max_length=100, null=True)),
                ('formation', models.CharField(blank=True, db_column='Formation', max_length=100, null=True)),
                ('current_storage', models.TextField(blank=True, db_column='Current storage', null=True)),
                ('comment', models.TextField(blank=True, db_column='Comment', null=True)),
                ('number_4he_nccstp_g_field', models.IntegerField(blank=True, db_column='4He [nccSTP/g]', null=True)),
                ('number_238_u_ppm_field', models.FloatField(blank=True, db_column='238_U [ppm]', null=True)),
                ('number_232_th_ppm_field', models.FloatField(blank=True, db_column='232_Th [ppm]', null=True)),
                ('number_147_sm_ppm_field', models.FloatField(blank=True, db_column='147_Sm [ppm]', null=True)),
                ('eu_ppm_field', models.FloatField(blank=True, db_column='eU [ppm]', null=True)),
                ('ft', models.FloatField(blank=True, db_column='FT', null=True)),
                ('th_u', models.FloatField(blank=True, db_column='Th/U', null=True)),
                ('measured_age_ma_field', models.FloatField(blank=True, db_column='Measured age [Ma]', null=True)),
                ('number_1s_measured_age_ma_field', models.FloatField(blank=True, db_column='1s measured age  [Ma]', null=True)),
                ('corrected_age_ma_field', models.FloatField(blank=True, db_column='Corrected age  [Ma]', null=True)),
                ('number_1s_corrected_age_ma_field', models.FloatField(blank=True, db_column='1s corrected age  [Ma]', null=True)),
                ('mean_age_ma_field', models.FloatField(blank=True, db_column='Mean age  [Ma]', null=True)),
                ('number_1s_mean_age_ma_field', models.FloatField(blank=True, db_column='1s mean age  [Ma]', null=True)),
                ('location_on_gis', models.TextField(blank=True, db_column='Location on GIS', null=True)),
            ],
            options={
                'db_table': 'analysis_u_he_view',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, unique=True)),
            ],
            options={
                'db_table': 'auth_group',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthGroupPermissions',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'auth_group_permissions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthPermission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('codename', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'auth_permission',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128)),
                ('last_login', models.DateTimeField(blank=True, null=True)),
                ('is_superuser', models.BooleanField()),
                ('username', models.CharField(max_length=150, unique=True)),
                ('first_name', models.CharField(max_length=150)),
                ('last_name', models.CharField(max_length=150)),
                ('email', models.CharField(max_length=254)),
                ('is_staff', models.BooleanField()),
                ('is_active', models.BooleanField()),
                ('date_joined', models.DateTimeField()),
            ],
            options={
                'db_table': 'auth_user',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUserGroups',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'auth_user_groups',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUserUserPermissions',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'auth_user_user_permissions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Contacts',
            fields=[
                ('contact_id', models.IntegerField(db_column='Contact ID', primary_key=True, serialize=False)),
                ('contact_type_remarks', models.TextField(blank=True, db_column='Contact Type Remarks', null=True)),
                ('observation_date', models.DateField(blank=True, db_column='Observation Date', null=True)),
            ],
            options={
                'db_table': 'contacts',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ContactsView',
            fields=[
                ('contact_id', models.TextField(blank=True, db_column='Contact ID', primary_key=True, serialize=False)),
                ('location_id', models.CharField(blank=True, db_column='Location ID', max_length=100, null=True)),
                ('decimal_longitude', models.FloatField(blank=True, db_column='Decimal Longitude', null=True)),
                ('decimal_latitude', models.FloatField(blank=True, db_column='Decimal Latitude', null=True)),
                ('elevation_in_meters', models.FloatField(blank=True, db_column='Elevation In Meters', null=True)),
                ('geodetic_datum', models.CharField(blank=True, db_column='Geodetic datum', max_length=100, null=True)),
                ('northing_in_meters', models.DecimalField(blank=True, db_column='Northing in Meters', decimal_places=65535, max_digits=65535, null=True)),
                ('easting_in_meters', models.DecimalField(blank=True, db_column='Easting in Meters', decimal_places=65535, max_digits=65535, null=True)),
                ('georeferenced_by', models.CharField(blank=True, db_column='Georeferenced By', max_length=100, null=True)),
                ('verbatim_locality', models.TextField(blank=True, db_column='Verbatim Locality', null=True)),
                ('mission_detailled_name', models.TextField(blank=True, db_column='Mission detailled name', null=True)),
                ('observation_determined_date', models.DateField(blank=True, db_column='Observation Determined Date', null=True)),
                ('observation_determined_by', models.TextField(blank=True, db_column='Observation Determined By', null=True)),
                ('contact_type', models.CharField(blank=True, db_column='Contact Type', max_length=100, null=True)),
                ('lithology_1', models.CharField(blank=True, db_column='Lithology 1', max_length=100, null=True)),
                ('lithology_2', models.CharField(blank=True, db_column='Lithology 2', max_length=100, null=True)),
                ('plane_type', models.CharField(blank=True, db_column='Plane type', max_length=100, null=True)),
                ('plane_orientation', models.TextField(blank=True, db_column='Plane Orientation', null=True)),
                ('contact_type_remarks', models.TextField(blank=True, db_column='Contact Type Remarks', null=True)),
            ],
            options={
                'db_table': 'contacts_view',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoAdminLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_time', models.DateTimeField()),
                ('object_id', models.TextField(blank=True, null=True)),
                ('object_repr', models.CharField(max_length=200)),
                ('action_flag', models.SmallIntegerField()),
                ('change_message', models.TextField()),
            ],
            options={
                'db_table': 'django_admin_log',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoContentType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('app_label', models.CharField(max_length=100)),
                ('model', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'django_content_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoMigrations',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('app', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255)),
                ('applied', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_migrations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoSession',
            fields=[
                ('session_key', models.CharField(max_length=40, primary_key=True, serialize=False)),
                ('session_data', models.TextField()),
                ('expire_date', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_session',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='FieldMissions',
            fields=[
                ('mission_id', models.CharField(db_column='Mission ID', max_length=100, primary_key=True, serialize=False)),
                ('mission_detailled_name', models.TextField(blank=True, db_column='Mission Detailled Name', null=True)),
                ('regional_place', models.TextField(blank=True, db_column='Regional place', null=True)),
                ('start_date', models.DateField(blank=True, db_column='Start date', null=True)),
                ('end_date', models.DateField(blank=True, db_column='End date', null=True)),
                ('stations_range', models.CharField(blank=True, db_column='Stations range', max_length=100, null=True)),
                ('samples_range', models.CharField(blank=True, db_column='Samples range', max_length=100, null=True)),
                ('geologists', models.TextField(blank=True, db_column='Geologists', null=True)),
                ('associated_field_notebooks', models.CharField(blank=True, db_column='Associated field notebooks', max_length=100, null=True)),
                ('associated_project', models.CharField(blank=True, db_column='Associated project', max_length=100, null=True)),
            ],
            options={
                'db_table': 'field_missions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='FieldMissionsView',
            fields=[
                ('mission_name', models.TextField(blank=True, db_column='Mission Name', null=True)),
                ('mission_id', models.CharField(blank=True, db_column='Mission ID', max_length=100, primary_key=True, serialize=False)),
                ('regional_place', models.TextField(blank=True, db_column='Regional place', null=True)),
                ('start_date', models.DateField(blank=True, db_column='Start date', null=True)),
                ('end_date', models.DateField(blank=True, db_column='End date', null=True)),
                ('stations_range', models.CharField(blank=True, db_column='Stations Range', max_length=100, null=True)),
                ('samples_range', models.CharField(blank=True, db_column='Samples Range', max_length=100, null=True)),
                ('participants', models.TextField(blank=True, db_column='Participants', null=True)),
                ('field_notebooks', models.CharField(blank=True, db_column='Field notebooks', max_length=100, null=True)),
                ('associated_project', models.CharField(blank=True, db_column='Associated project', max_length=100, null=True)),
            ],
            options={
                'db_table': 'field_missions_view',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Formations',
            fields=[
                ('formation_id', models.CharField(db_column='Formation ID', max_length=100, primary_key=True, serialize=False)),
                ('formation_full_name', models.CharField(blank=True, db_column='Formation Full Name', max_length=100, null=True)),
                ('detailled_description', models.TextField(blank=True, db_column='Detailled description', null=True)),
            ],
            options={
                'db_table': 'formations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='FormationsView',
            fields=[
                ('formation_id', models.CharField(blank=True, db_column='Formation ID', max_length=100, primary_key=True, serialize=False)),
                ('formation_full_name', models.CharField(blank=True, db_column='Formation Full Name', max_length=100, null=True)),
                ('detailled_description', models.TextField(blank=True, db_column='Detailled description', null=True)),
                ('latest_age_or_highest_stage', models.CharField(blank=True, db_column='Latest Age Or Highest Stage', max_length=100, null=True)),
                ('earliest_age_or_lowest_stage', models.CharField(blank=True, db_column='Earliest Age Or Lowest Stage', max_length=100, null=True)),
            ],
            options={
                'db_table': 'formations_view',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='GeographyColumns',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('f_table_catalog', models.TextField(blank=True, db_collation='C', null=True)),
                ('f_table_schema', models.TextField(blank=True, db_collation='C', null=True)),
                ('f_table_name', models.TextField(blank=True, db_collation='C', null=True)),
                ('f_geography_column', models.TextField(blank=True, db_collation='C', null=True)),
                ('coord_dimension', models.IntegerField(blank=True, null=True)),
                ('srid', models.IntegerField(blank=True, null=True)),
                ('type', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'geography_columns',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Geologists',
            fields=[
                ('id_geologist', models.CharField(db_column='ID Geologist', max_length=4, primary_key=True, serialize=False)),
                ('geologist_full_name', models.TextField(db_column='Geologist full name')),
                ('institution', models.CharField(blank=True, db_column='Institution', max_length=100, null=True)),
                ('email', models.CharField(blank=True, db_column='Email', max_length=100, null=True)),
                ('orcid', models.CharField(blank=True, db_column='ORCID', max_length=100, null=True)),
            ],
            options={
                'db_table': 'geologists',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='GeometryColumns',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('f_table_catalog', models.CharField(blank=True, db_collation='C', max_length=256, null=True)),
                ('f_table_schema', models.TextField(blank=True, db_collation='C', null=True)),
                ('f_table_name', models.TextField(blank=True, db_collation='C', null=True)),
                ('f_geometry_column', models.TextField(blank=True, db_collation='C', null=True)),
                ('coord_dimension', models.IntegerField(blank=True, null=True)),
                ('srid', models.IntegerField(blank=True, null=True)),
                ('type', models.CharField(blank=True, max_length=30, null=True)),
            ],
            options={
                'db_table': 'geometry_columns',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Instruments',
            fields=[
                ('instrument_id', models.CharField(db_column='Instrument ID', max_length=100, primary_key=True, serialize=False)),
                ('extended_name', models.TextField(blank=True, db_column='Extended name', null=True)),
                ('serial_number', models.CharField(blank=True, db_column='Serial Number', max_length=100, null=True)),
            ],
            options={
                'db_table': 'instruments',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='LayerStyles',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('f_table_catalog', models.CharField(blank=True, max_length=100, null=True)),
                ('f_table_schema', models.CharField(blank=True, max_length=100, null=True)),
                ('f_table_name', models.CharField(blank=True, max_length=100, null=True)),
                ('f_geometry_column', models.CharField(blank=True, max_length=100, null=True)),
                ('stylename', models.TextField(blank=True, null=True)),
                ('styleqml', models.TextField(blank=True, null=True)),
                ('stylesld', models.TextField(blank=True, null=True)),
                ('useasdefault', models.BooleanField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('owner', models.CharField(blank=True, max_length=63, null=True)),
                ('ui', models.TextField(blank=True, null=True)),
                ('update_time', models.DateTimeField(blank=True, null=True)),
                ('type', models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                'db_table': 'layer_styles',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='LexiconAlterationFacies',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('label', models.CharField(max_length=100)),
                ('definition', models.TextField(blank=True, null=True)),
                ('source', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'lexicon_alteration_facies',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='LexiconContactType',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('label', models.CharField(max_length=100)),
                ('definition', models.TextField(blank=True, null=True)),
                ('source', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'lexicon_contact_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='LexiconConventionCodeMeasure',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('label', models.CharField(max_length=100)),
                ('definition', models.TextField(blank=True, null=True)),
                ('source', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'lexicon_convention_code_measure',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='LexiconEpsg',
            fields=[
                ('id_epsg', models.IntegerField(primary_key=True, serialize=False)),
                ('coord_ref_sys_name', models.CharField(max_length=100)),
                ('coord_red_sys_kind', models.CharField(blank=True, max_length=100, null=True)),
                ('comment', models.TextField(blank=True, null=True)),
                ('source', models.TextField(blank=True, null=True)),
                ('revision_date', models.DateField(blank=True, null=True)),
            ],
            options={
                'db_table': 'lexicon_epsg',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='LexiconFaultMovementSense',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('label', models.CharField(max_length=100)),
                ('definition', models.TextField(blank=True, null=True)),
                ('source', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'lexicon_fault_movement_sense',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='LexiconFaultSensCriterion',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('label', models.CharField(max_length=100)),
                ('definition', models.TextField(blank=True, null=True)),
                ('source', models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                'db_table': 'lexicon_fault_sens_criterion',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='LexiconFossils',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('label', models.CharField(max_length=100)),
                ('definition', models.TextField(blank=True, null=True)),
                ('source', models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                'db_table': 'lexicon_fossils',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='LexiconInternationalChronostratigraphicChart',
            fields=[
                ('sorting_order', models.SmallIntegerField(primary_key=True, serialize=False)),
                ('id_chronosystem', models.CharField(max_length=100, unique=True)),
                ('label', models.CharField(max_length=100)),
                ('rank', models.CharField(max_length=100)),
                ('red', models.SmallIntegerField()),
                ('green', models.SmallIntegerField()),
                ('blue', models.SmallIntegerField()),
                ('html', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'lexicon_international_chronostratigraphic_chart',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='LexiconLineType',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('label', models.CharField(max_length=100)),
                ('definition', models.TextField(blank=True, null=True)),
                ('source', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'lexicon_line_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='LexiconMeasurementAccuracy',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('label', models.CharField(max_length=100)),
                ('definition', models.TextField(blank=True, null=True)),
                ('source', models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                'db_table': 'lexicon_measurement_accuracy',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='LexiconMetamorphicFacies',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('label', models.CharField(max_length=100)),
                ('definition', models.TextField(blank=True, null=True)),
                ('source', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'lexicon_metamorphic_facies',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='LexiconMinerals',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('ima_status', models.CharField(blank=True, db_column='IMA status', max_length=100, null=True)),
            ],
            options={
                'db_table': 'lexicon_minerals',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='LexiconObsSiteType',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('label', models.CharField(max_length=100)),
                ('definition', models.TextField(blank=True, null=True)),
                ('source', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'lexicon_obs_site_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='LexiconParticleShape',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('label', models.CharField(max_length=100)),
                ('definition', models.TextField(blank=True, null=True)),
                ('source', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'lexicon_particle_shape',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='LexiconParticleType',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('label', models.CharField(max_length=100)),
                ('definition', models.TextField(blank=True, null=True)),
                ('source', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'lexicon_particle_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='LexiconPlanarPolarity',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('label', models.CharField(max_length=100)),
                ('definition', models.TextField(blank=True, null=True)),
                ('source', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'lexicon_planar_polarity',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='LexiconPlaneType',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('label', models.CharField(max_length=100)),
                ('definition', models.TextField(blank=True, null=True)),
                ('source', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'lexicon_plane_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='LexiconSampleAim',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('label', models.CharField(max_length=100)),
                ('definition', models.TextField(blank=True, null=True)),
                ('source', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'lexicon_sample_aim',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='LexiconSampleSectionType',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('label', models.CharField(max_length=100)),
                ('definition', models.TextField(blank=True, null=True)),
                ('source', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'lexicon_sample_section_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='LexiconSampleType',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('label', models.CharField(max_length=100)),
                ('definition', models.TextField(blank=True, null=True)),
                ('source', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'lexicon_sample_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='LexiconSimpleLithology',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('label', models.CharField(max_length=100)),
                ('definition', models.TextField(blank=True, null=True)),
                ('source', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'lexicon_simple_lithology',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='LexiconTimeZones',
            fields=[
                ('id_time_zone', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('offset', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'lexicon_time_zones',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='LithologyDescriptions',
            fields=[
                ('description_lithology_id', models.SmallIntegerField(db_column='Description Lithology ID', primary_key=True, serialize=False)),
                ('particle_type', models.CharField(blank=True, db_column='Particle Type', max_length=100, null=True)),
                ('rock_texture', models.CharField(blank=True, db_column='Rock Texture', max_length=100, null=True)),
                ('color_rock_patina', models.CharField(blank=True, db_column='Color Rock Patina', max_length=100, null=True)),
                ('color_rock_into_break', models.CharField(blank=True, db_column='Color Rock Into Break', max_length=100, null=True)),
                ('minerals_assemblages', models.TextField(blank=True, db_column='Minerals Assemblages', null=True)),
                ('lithology_remarks', models.TextField(blank=True, db_column='Lithology Remarks', null=True)),
                ('deformation', models.TextField(blank=True, db_column='Deformation', null=True)),
                ('detailled_lithology_description', models.TextField(blank=True, db_column='Detailled Lithology Description', null=True)),
            ],
            options={
                'db_table': 'lithology_descriptions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='LithologyDescriptionView',
            fields=[
                ('description_lithology_id', models.TextField(blank=True, db_column='Description Lithology ID', null=True)),
                ('location_id', models.CharField(blank=True, db_column='Location ID', max_length=100, primary_key=True, serialize=False)),
                ('decimal_longitude', models.FloatField(blank=True, db_column='Decimal Longitude', null=True)),
                ('decimal_latitude', models.FloatField(blank=True, db_column='Decimal Latitude', null=True)),
                ('elevation_in_meters', models.FloatField(blank=True, db_column='Elevation In Meters', null=True)),
                ('geodetic_datum', models.CharField(blank=True, db_column='Geodetic datum', max_length=100, null=True)),
                ('northing_in_meters', models.DecimalField(blank=True, db_column='Northing in Meters', decimal_places=65535, max_digits=65535, null=True)),
                ('easting_in_meters', models.DecimalField(blank=True, db_column='Easting in Meters', decimal_places=65535, max_digits=65535, null=True)),
                ('georeferenced_by', models.CharField(blank=True, db_column='Georeferenced By', max_length=100, null=True)),
                ('verbatim_locality', models.TextField(blank=True, db_column='Verbatim Locality', null=True)),
                ('mission_detailled_name', models.TextField(blank=True, db_column='Mission detailled name', null=True)),
                ('observation_determined_date', models.DateField(blank=True, db_column='Observation Determined Date', null=True)),
                ('observation_determined_by', models.TextField(blank=True, db_column='Observation Determined By', null=True)),
                ('formation', models.CharField(blank=True, db_column='Formation', max_length=100, null=True)),
                ('simple_lithology_description', models.CharField(blank=True, db_column='Simple Lithology Description', max_length=100, null=True)),
                ('detailled_lithology_description', models.TextField(blank=True, db_column='Detailled Lithology Description', null=True)),
                ('alteration_facies', models.CharField(blank=True, db_column='Alteration Facies', max_length=100, null=True)),
                ('metamorphism_facies', models.CharField(blank=True, db_column='Metamorphism Facies', max_length=100, null=True)),
                ('particle_type', models.CharField(blank=True, db_column='Particle Type', max_length=100, null=True)),
                ('particle_shape', models.CharField(blank=True, db_column='Particle Shape', max_length=100, null=True)),
                ('rock_texture', models.CharField(blank=True, db_column='Rock Texture', max_length=100, null=True)),
                ('color_rock_patina', models.CharField(blank=True, db_column='Color Rock Patina', max_length=100, null=True)),
                ('color_rock_into_break', models.CharField(blank=True, db_column='Color Rock Into Break', max_length=100, null=True)),
                ('fossils', models.CharField(blank=True, db_column='Fossils', max_length=100, null=True)),
                ('deformation', models.TextField(blank=True, db_column='Deformation', null=True)),
                ('minerals_assemblages', models.TextField(blank=True, db_column='Minerals Assemblages', null=True)),
                ('lithologic_description_determined_by', models.TextField(blank=True, db_column='Lithologic Description Determined By', null=True)),
                ('lithology_remarks', models.TextField(blank=True, db_column='Lithology Remarks', null=True)),
            ],
            options={
                'db_table': 'lithology_description_view',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Locations',
            fields=[
                ('location_id', models.CharField(db_column='Location ID', max_length=100, primary_key=True, serialize=False)),
                ('decimal_longitude', models.CharField(db_column='Decimal Longitude', max_length=100)),
                ('decimal_latitude', models.CharField(db_column='Decimal Latitude', max_length=100)),
                ('georeferenced_by', models.CharField(blank=True, db_column='Georeferenced By', max_length=100, null=True)),
                ('elevation_in_meters', models.FloatField(blank=True, db_column='Elevation In Meters', null=True)),
                ('barometric_elevation_in_meters', models.FloatField(blank=True, db_column='Barometric Elevation in Meters', null=True)),
                ('georeferenced_date_iso_8601_1_2019_field', models.CharField(blank=True, db_column='Georeferenced Date (ISO 8601-1:2019)', max_length=100, null=True)),
                ('georeferenced_local_date', models.DateField(blank=True, db_column='Georeferenced Local Date', null=True)),
                ('georeferenced_local_time', models.TimeField(blank=True, db_column='Georeferenced Local Time', null=True)),
                ('verbatim_locality', models.TextField(blank=True, db_column='Verbatim Locality', null=True)),
                ('azimuth_of_observation', models.SmallIntegerField(blank=True, db_column='Azimuth Of Observation', null=True)),
                ('location_remarks', models.TextField(blank=True, db_column='Location Remarks', null=True)),
            ],
            options={
                'db_table': 'locations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='LocationsView',
            fields=[
                ('location_id', models.CharField(blank=True, db_column='Location ID', max_length=100, primary_key=True, serialize=False)),
                ('decimal_longitude', models.FloatField(blank=True, db_column='Decimal Longitude', null=True)),
                ('decimal_latitude', models.FloatField(blank=True, db_column='Decimal Latitude', null=True)),
                ('elevation_in_meters', models.FloatField(blank=True, db_column='Elevation In Meters', null=True)),
                ('geodetic_datum', models.CharField(blank=True, db_column='Geodetic datum', max_length=100, null=True)),
                ('northing_in_meters', models.DecimalField(blank=True, db_column='Northing in Meters', decimal_places=65535, max_digits=65535, null=True)),
                ('easting_in_meters', models.DecimalField(blank=True, db_column='Easting in Meters', decimal_places=65535, max_digits=65535, null=True)),
                ('georeferenced_by', models.CharField(blank=True, db_column='Georeferenced By', max_length=100, null=True)),
                ('verbatim_locality', models.TextField(blank=True, db_column='Verbatim Locality', null=True)),
                ('georeferenced_local_date', models.DateField(blank=True, db_column='Georeferenced Local Date', null=True)),
                ('georeferenced_local_time', models.TimeField(blank=True, db_column='Georeferenced Local Time', null=True)),
                ('time_zone', models.CharField(blank=True, db_column='Time Zone', max_length=100, null=True)),
                ('mission_detailled_name', models.TextField(blank=True, db_column='Mission Detailled Name', null=True)),
                ('observation_site_type', models.CharField(blank=True, db_column='Observation site type', max_length=100, null=True)),
                ('azimuth_of_the_osbervation', models.SmallIntegerField(blank=True, db_column='Azimuth of the osbervation', null=True)),
                ('location_remarks', models.TextField(blank=True, db_column='Location Remarks', null=True)),
                ('location_on_gis', models.TextField(blank=True, db_column='Location on GIS', null=True)),
            ],
            options={
                'db_table': 'locations_view',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Measurements',
            fields=[
                ('measurement_id', models.IntegerField(db_column='Measurement ID', primary_key=True, serialize=False)),
                ('plane_dip_azimuth', models.SmallIntegerField(blank=True, db_column='Plane dip azimuth', null=True)),
                ('plane_strike', models.SmallIntegerField(blank=True, db_column='Plane Strike', null=True)),
                ('plane_dip', models.SmallIntegerField(blank=True, db_column='Plane Dip', null=True)),
                ('plane_dip_quadrant', models.CharField(blank=True, db_column='Plane Dip Quadrant', max_length=2, null=True)),
                ('plane_remarks', models.TextField(blank=True, db_column='Plane Remarks', null=True)),
                ('line_pitch', models.SmallIntegerField(blank=True, db_column='Line Pitch', null=True)),
                ('line_pitch_quadrant', models.CharField(blank=True, db_column='Line Pitch Quadrant', max_length=2, null=True)),
                ('line_trend', models.SmallIntegerField(blank=True, db_column='Line Trend', null=True)),
                ('line_plunge', models.SmallIntegerField(blank=True, db_column='Line Plunge', null=True)),
                ('line_remarks', models.TextField(blank=True, db_column='Line Remarks', null=True)),
                ('measurement_determined_date', models.DateField(blank=True, db_column='Measurement Determined Date', null=True)),
            ],
            options={
                'db_table': 'measurements',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MeasurementsLinesView',
            fields=[
                ('measurement_id', models.CharField(blank=True, db_column='Measurement ID', max_length=100, primary_key=True, serialize=False)),
                ('location_id', models.CharField(blank=True, db_column='Location ID', max_length=100, null=True)),
                ('decimal_longitude', models.FloatField(blank=True, db_column='Decimal Longitude', null=True)),
                ('decimal_latitude', models.FloatField(blank=True, db_column='Decimal Latitude', null=True)),
                ('elevation_in_meters', models.FloatField(blank=True, db_column='Elevation In Meters', null=True)),
                ('geodetic_datum', models.CharField(blank=True, db_column='Geodetic datum', max_length=100, null=True)),
                ('northing_in_meters', models.DecimalField(blank=True, db_column='Northing in Meters', decimal_places=65535, max_digits=65535, null=True)),
                ('easting_in_meters', models.DecimalField(blank=True, db_column='Easting in Meters', decimal_places=65535, max_digits=65535, null=True)),
                ('georeferenced_by', models.CharField(blank=True, db_column='Georeferenced By', max_length=100, null=True)),
                ('verbatim_locality', models.TextField(blank=True, db_column='Verbatim Locality', null=True)),
                ('mission_detailled_name', models.TextField(blank=True, db_column='Mission detailled name', null=True)),
                ('measurement_determined_date', models.DateField(blank=True, db_column='Measurement Determined Date', null=True)),
                ('measurement_determined_by', models.TextField(blank=True, db_column='Measurement Determined By', null=True)),
                ('instrument_id', models.TextField(blank=True, db_column='Instrument ID', null=True)),
                ('formation', models.CharField(blank=True, db_column='Formation', max_length=100, null=True)),
                ('line_type', models.CharField(blank=True, db_column='Line type', max_length=100, null=True)),
                ('trend', models.SmallIntegerField(blank=True, db_column='Trend', null=True)),
                ('plunge', models.SmallIntegerField(blank=True, db_column='Plunge', null=True)),
                ('fault_movement_sense', models.CharField(blank=True, db_column='Fault Movement Sense', max_length=100, null=True)),
                ('measurement_accuracy', models.CharField(blank=True, db_column='Measurement Accuracy', max_length=100, null=True)),
                ('location_on_gis', models.TextField(blank=True, db_column='Location on GIS', null=True)),
            ],
            options={
                'db_table': 'measurements_lines_view',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MeasurementsPlanesView',
            fields=[
                ('measurement_id', models.CharField(blank=True, db_column='Measurement ID', max_length=100, primary_key=True, serialize=False)),
                ('location_id', models.CharField(blank=True, db_column='Location ID', max_length=100, null=True)),
                ('decimal_longitude', models.FloatField(blank=True, db_column='Decimal Longitude', null=True)),
                ('decimal_latitude', models.FloatField(blank=True, db_column='Decimal Latitude', null=True)),
                ('elevation_in_meters', models.FloatField(blank=True, db_column='Elevation In Meters', null=True)),
                ('geodetic_datum', models.CharField(blank=True, db_column='Geodetic datum', max_length=100, null=True)),
                ('northing_in_meters', models.DecimalField(blank=True, db_column='Northing in Meters', decimal_places=65535, max_digits=65535, null=True)),
                ('easting_in_meters', models.DecimalField(blank=True, db_column='Easting in Meters', decimal_places=65535, max_digits=65535, null=True)),
                ('georeferenced_by', models.CharField(blank=True, db_column='Georeferenced By', max_length=100, null=True)),
                ('verbatim_locality', models.TextField(blank=True, db_column='Verbatim Locality', null=True)),
                ('mission_detailled_name', models.TextField(blank=True, db_column='Mission detailled name', null=True)),
                ('measurement_determined_date', models.DateField(blank=True, db_column='Measurement Determined Date', null=True)),
                ('measurement_determined_by', models.TextField(blank=True, db_column='Measurement Determined By', null=True)),
                ('instrument_id', models.TextField(blank=True, db_column='Instrument ID', null=True)),
                ('formation', models.CharField(blank=True, db_column='Formation', max_length=100, null=True)),
                ('plane_type', models.CharField(blank=True, db_column='Plane type', max_length=100, null=True)),
                ('polarity', models.TextField(blank=True, db_column='Polarity', null=True)),
                ('dip', models.SmallIntegerField(blank=True, db_column='Dip', null=True)),
                ('azimuth', models.SmallIntegerField(blank=True, db_column='Azimuth', null=True)),
                ('measurement_accuracy', models.CharField(blank=True, db_column='Measurement Accuracy', max_length=100, null=True)),
                ('location_on_gis', models.TextField(blank=True, db_column='Location on GIS', null=True)),
            ],
            options={
                'db_table': 'measurements_planes_view',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Notebooks',
            fields=[
                ('station', models.CharField(db_column='Station', max_length=100, primary_key=True, serialize=False)),
                ('img_1', models.BinaryField(blank=True, null=True)),
                ('img_2', models.BinaryField(blank=True, null=True)),
                ('img_3', models.BinaryField(blank=True, null=True)),
                ('img_4', models.BinaryField(blank=True, null=True)),
                ('img_5', models.BinaryField(blank=True, null=True)),
                ('img_6', models.BinaryField(blank=True, null=True)),
                ('img_7', models.BinaryField(blank=True, null=True)),
                ('img_8', models.BinaryField(blank=True, null=True)),
                ('img_9', models.BinaryField(blank=True, null=True)),
                ('img_10', models.BinaryField(blank=True, null=True)),
            ],
            options={
                'db_table': 'notebooks',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Samples',
            fields=[
                ('material_sample_id', models.CharField(db_column='Material Sample ID', max_length=100, primary_key=True, serialize=False)),
                ('sampling_date', models.DateField(blank=True, db_column='Sampling Date', null=True)),
                ('sample_remarks', models.TextField(blank=True, db_column='Sample Remarks', null=True)),
                ('storage', models.TextField(blank=True, db_column='Storage', null=True)),
                ('igsn', models.CharField(blank=True, db_column='IGSN', max_length=100, null=True)),
            ],
            options={
                'db_table': 'samples',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='SampleSectionsView',
            fields=[
                ('sample_section_id', models.CharField(blank=True, db_column='Sample Section ID', max_length=100, primary_key=True, serialize=False)),
                ('location_id', models.CharField(blank=True, db_column='Location ID', max_length=100, null=True)),
                ('decimal_longitude', models.FloatField(blank=True, db_column='Decimal Longitude', null=True)),
                ('decimal_latitude', models.FloatField(blank=True, db_column='Decimal Latitude', null=True)),
                ('elevation_in_meters', models.FloatField(blank=True, db_column='Elevation In Meters', null=True)),
                ('geodetic_datum', models.CharField(blank=True, db_column='Geodetic datum', max_length=100, null=True)),
                ('northing_in_meters', models.DecimalField(blank=True, db_column='Northing in Meters', decimal_places=65535, max_digits=65535, null=True)),
                ('easting_in_meters', models.DecimalField(blank=True, db_column='Easting in Meters', decimal_places=65535, max_digits=65535, null=True)),
                ('georeferenced_by', models.CharField(blank=True, db_column='Georeferenced By', max_length=100, null=True)),
                ('verbatim_locality', models.TextField(blank=True, db_column='Verbatim Locality', null=True)),
                ('mission_detailled_name', models.TextField(blank=True, db_column='Mission detailled name', null=True)),
                ('sampling_date', models.DateField(blank=True, db_column='Sampling Date', null=True)),
                ('simple_lithology_description', models.CharField(blank=True, db_column='Simple Lithology Description', max_length=100, null=True)),
                ('detailled_lithology_description', models.TextField(blank=True, db_column='Detailled Lithology Description', null=True)),
                ('thin_section_orientation', models.CharField(blank=True, db_column='Thin Section Orientation', max_length=100, null=True)),
                ('plane_type', models.CharField(blank=True, db_column='Plane type', max_length=100, null=True)),
                ('plane_orientation', models.TextField(blank=True, db_column='Plane Orientation', null=True)),
                ('line_type', models.CharField(blank=True, db_column='Line Type', max_length=100, null=True)),
                ('line_orientation', models.TextField(blank=True, db_column='Line orientation', null=True)),
                ('number_of_sections', models.SmallIntegerField(blank=True, db_column='Number of sections', null=True)),
                ('position_on_gis', models.TextField(blank=True, db_column='Position on GIS', null=True)),
            ],
            options={
                'db_table': 'sample_sections_view',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='SamplesSections',
            fields=[
                ('sample_section_id', models.CharField(db_column='Sample Section ID', max_length=100, primary_key=True, serialize=False)),
                ('orientation', models.CharField(blank=True, db_column='Orientation', max_length=100, null=True)),
                ('mineral_assemblage', models.CharField(blank=True, db_column='Mineral Assemblage', max_length=100, null=True)),
                ('texture', models.CharField(blank=True, db_column='Texture', max_length=100, null=True)),
                ('microtectonic_description', models.TextField(blank=True, db_column='Microtectonic description', null=True)),
                ('movement_sens', models.CharField(blank=True, db_column='Movement sens', max_length=100, null=True)),
                ('supplements', models.TextField(blank=True, db_column='Supplements', null=True)),
                ('sample_section_remarks', models.TextField(blank=True, db_column='Sample Section Remarks', null=True)),
                ('storage', models.CharField(blank=True, db_column='Storage', max_length=100, null=True)),
                ('number_of_sections', models.SmallIntegerField(blank=True, db_column='Number of sections', null=True)),
            ],
            options={
                'db_table': 'samples_sections',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='SamplesView',
            fields=[
                ('material_sample_id', models.CharField(blank=True, db_column='Material Sample ID', max_length=100, null=True)),
                ('location_id', models.CharField(blank=True, db_column='Location ID', max_length=100, primary_key=True, serialize=False)),
                ('decimal_longitude', models.FloatField(blank=True, db_column='Decimal Longitude', null=True)),
                ('decimal_latitude', models.FloatField(blank=True, db_column='Decimal Latitude', null=True)),
                ('elevation_in_meters', models.FloatField(blank=True, db_column='Elevation In Meters', null=True)),
                ('geodetic_datum', models.CharField(blank=True, db_column='Geodetic datum', max_length=100, null=True)),
                ('northing_in_meters', models.DecimalField(blank=True, db_column='Northing in Meters', decimal_places=65535, max_digits=65535, null=True)),
                ('easting_in_meters', models.DecimalField(blank=True, db_column='Easting in Meters', decimal_places=65535, max_digits=65535, null=True)),
                ('georeferenced_by', models.CharField(blank=True, db_column='Georeferenced By', max_length=100, null=True)),
                ('verbatim_locality', models.TextField(blank=True, db_column='Verbatim Locality', null=True)),
                ('mission_detailled_name', models.TextField(blank=True, db_column='Mission detailled name', null=True)),
                ('sampling_date', models.DateField(blank=True, db_column='Sampling Date', null=True)),
                ('measurement_determined_by', models.TextField(blank=True, db_column='Measurement Determined By', null=True)),
                ('sample_type', models.CharField(blank=True, db_column='Sample type', max_length=100, null=True)),
                ('first_sample_aim', models.CharField(blank=True, db_column='First Sample Aim', max_length=100, null=True)),
                ('second_sample_aim', models.CharField(blank=True, db_column='Second Sample Aim', max_length=100, null=True)),
                ('lithology_description', models.CharField(blank=True, db_column='Lithology Description', max_length=100, null=True)),
                ('alteration_facies', models.CharField(blank=True, db_column='Alteration Facies', max_length=100, null=True)),
                ('metamorphism_facies', models.CharField(blank=True, db_column='Metamorphism Facies', max_length=100, null=True)),
                ('formation', models.CharField(blank=True, db_column='Formation', max_length=100, null=True)),
                ('plane_type', models.CharField(blank=True, db_column='Plane type', max_length=100, null=True)),
                ('plane_orientation', models.TextField(blank=True, db_column='Plane Orientation', null=True)),
                ('line_type', models.CharField(blank=True, db_column='Line type', max_length=100, null=True)),
                ('line_orientation', models.TextField(blank=True, db_column='Line Orientation', null=True)),
                ('sample_remarks', models.TextField(blank=True, db_column='Sample Remarks', null=True)),
                ('current_storage', models.TextField(blank=True, db_column='Current storage', null=True)),
                ('location_on_gis', models.TextField(blank=True, db_column='Location on GIS', null=True)),
            ],
            options={
                'db_table': 'samples_view',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='SpatialRefSys',
            fields=[
                ('srid', models.IntegerField(primary_key=True, serialize=False)),
                ('auth_name', models.CharField(blank=True, max_length=256, null=True)),
                ('auth_srid', models.IntegerField(blank=True, null=True)),
                ('srtext', models.CharField(blank=True, max_length=2048, null=True)),
                ('proj4text', models.CharField(blank=True, max_length=2048, null=True)),
            ],
            options={
                'db_table': 'spatial_ref_sys',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Test',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('analysis_id', models.CharField(blank=True, db_column='Analysis ID', max_length=100, null=True)),
                ('material_sample_id', models.CharField(blank=True, db_column='Material Sample ID', max_length=100, null=True)),
                ('number_36ar_fv_field', models.FloatField(blank=True, db_column='36Ar [fV]', null=True)),
                ('uncertainty_36ar_1s_field', models.FloatField(blank=True, db_column='uncertainty 36Ar [%1s] ', null=True)),
                ('number_37ar_fv_field', models.FloatField(blank=True, db_column='37Ar [fV]', null=True)),
                ('uncerainty_37ar_1s_field', models.FloatField(blank=True, db_column='uncerainty 37Ar [1s] ', null=True)),
                ('number_38ar_fv_field', models.FloatField(blank=True, db_column='38Ar [fV]', null=True)),
                ('uncertainty_38ar_field', models.FloatField(blank=True, db_column='uncertainty 38Ar [%] ', null=True)),
                ('number_39ar_fv_field', models.FloatField(blank=True, db_column='39Ar [fV] ', null=True)),
                ('uncertainty_39ar_1s_field', models.FloatField(blank=True, db_column='uncertainty 39Ar [1s] ', null=True)),
                ('number_40ar_fv_field', models.FloatField(blank=True, db_column='40Ar [fV]', null=True)),
                ('number_1s_40ar_field', models.FloatField(blank=True, db_column='1s 40Ar [%] ', null=True)),
                ('age_ma_field', models.FloatField(blank=True, db_column='Age [Ma]', null=True)),
                ('uncertainty_age_2s_ma_field', models.FloatField(blank=True, db_column='uncertainty Age [2s,Ma]', null=True)),
                ('number_40ar_field', models.FloatField(blank=True, db_column='40Ar [%] ', null=True)),
                ('number_39ar_field', models.FloatField(blank=True, db_column='39Ar [%]', null=True)),
                ('ca_k', models.FloatField(blank=True, db_column='Ca/K', null=True)),
                ('uncertainty_ca_k_1s_field', models.FloatField(blank=True, db_column='uncertainty Ca/K [1s]', null=True)),
                ('cl_k', models.FloatField(blank=True, db_column='Cl/K', null=True)),
                ('uncertainty_cl_k_1s_field', models.FloatField(blank=True, db_column='uncertainty Cl/K [1s]', null=True)),
            ],
            options={
                'db_table': 'test',
                'managed': False,
            },
        ),
    ]
